from datetime import datetime
from typing import Any

from oas_tools.cli_gen.layout_types import CommandNode
from oas_tools.cli_gen.utils import to_snake_case
from oas_tools.types import OasField
from oas_tools.utils import map_operations

NL = "\n"
SHEBANG = """\
#!/usr/bin/env python3
"""
COPYRIGHT = f"""\
# Copyright {datetime.now().year}
#
# This code was generated by the oas-tools CLI generator, DO NOT EDIT
#
"""
class Generator:
    def __init__(self, package_name: str, oas: dict[str, Any]):
        self.package_name = package_name
        self.operations = map_operations(oas.get(OasField.PATHS, {}))
        self.models = oas.get(OasField.COMPONENTS, {}).get(OasField.SCHEMAS, {})
        self.default_host = "http://acme.com"

    def shebang(self) -> str:
        """Returns the shebang line that goes at the top of each file."""
        return SHEBANG

    def copyright(self) -> str:
        """Returns the copyright header near the top of each file."""
        return COPYRIGHT

    def standard_imports(self) -> str:
        return f"""
from enum import Enum
from typing_extensions import Annotated

import typer

from {self.package_name} import _arguments as _a
"""

    def subcommand_imports(self, subcommands: list[CommandNode]) -> str:
        return NL.join(
            f"from {self.package_name}.{to_snake_case(n.identifier)} import app as {to_snake_case(n.identifier)}"
            for n in subcommands
        )

    def app_definition(self, node: CommandNode) -> str:
        result = f"""

app = typer.Typer(no_args_is_help=True, help="{node.description}")
"""
        for child in node.subcommands():
            result += f"""\
app.add_typer({to_snake_case(child.identifier)}, name="{child.command}")
"""

        return result

    def main(self) -> str:
        return """

if __name__ == "__main__":
    app()
"""

    def op_short_help(self, operation: dict[str, Any]) -> str:
        """Gets the short help for the operation."""
        summary = operation.get(OasField.SUMMARY)
        if summary:
            return summary

        description = operation.get(OasField.DESCRIPTION, "")
        return description.split(". ")[0]

    def op_long_help(self, operation: dict[str, Any]) -> str:
        text = operation.get(OasField.DESCRIPTION) or operation.get(OasField.SUMMARY) or ""
        # TODO: sanitize  NL's, long text, etc
        return text

    def op_infra_arguments(self, operation: dict[str, Any]) -> list[str]:
        # NOTE: other args may be appended later, so keeping as list
        args = [
            f'_api_host: _a.ApiHostOption = "{self.default_host}"',
            '_api_key: _a.ApiKeyOption = None',
            '_api_timeout: _a.ApiTimeoutOption = 5',
            '_log_level: _a.LogLevelOption = _a.LogLevel.WARN',
            '_out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE',
            '_out_style: _a.OutputStyleOption = _a.OutputStyle.ALL',
        ]
        return args

    def op_arguments(self, operation: dict[str, Any]) -> str:
        args = []
        # TODO: path params
        # TODO: query params
        # TODO: body params
        args.extend(self.op_infra_arguments(operation))

        return f"{NL}    " + f",{NL}    ".join(args) + f",{NL}"

    def function_definition(self, node: CommandNode) -> str:
        op = self.operations.get(node.identifier)
        method = op.get(OasField.X_METHOD).upper()

        return f"""

@app.command("{node.command}", help="{self.op_short_help(op)}")
def {to_snake_case(node.identifier)}({self.op_arguments(op)}) -> None:
    '''
    {self.op_long_help(op)}
    '''
    # handler for {node.identifier}: {method} {op.get(OasField.X_PATH)}
    return
"""
